package com.welove520.timelineupload.task;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO".
*/
public class PhotoDao extends AbstractDao<Photo, Long> {

    public static final String TABLENAME = "PHOTO";

    /**
     * Properties of entity Photo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property PhotoId = new Property(1, Long.class, "photoId", true, "_id");
        public final static Property SendTimeMS = new Property(2, Long.class, "sendTimeMS", false, "SEND_TIME_MS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property IsUploaded = new Property(5, boolean.class, "isUploaded", false, "IS_UPLOADED");
    }

    private Query<Photo> timelineTask_PhotoListQuery;

    public PhotoDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: photoId
                "\"SEND_TIME_MS\" INTEGER," + // 2: sendTimeMS
                "\"NAME\" TEXT," + // 3: name
                "\"PATH\" TEXT," + // 4: path
                "\"IS_UPLOADED\" INTEGER NOT NULL );"); // 5: isUploaded
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_PHOTO__id_DESC ON \"PHOTO\"" +
                " (\"_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Photo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindLong(2, photoId);
        }
 
        Long sendTimeMS = entity.getSendTimeMS();
        if (sendTimeMS != null) {
            stmt.bindLong(3, sendTimeMS);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
        stmt.bindLong(6, entity.getIsUploaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Photo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindLong(2, photoId);
        }
 
        Long sendTimeMS = entity.getSendTimeMS();
        if (sendTimeMS != null) {
            stmt.bindLong(3, sendTimeMS);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
        stmt.bindLong(6, entity.getIsUploaded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public Photo readEntity(Cursor cursor, int offset) {
        Photo entity = new Photo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // photoId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sendTimeMS
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // path
            cursor.getShort(offset + 5) != 0 // isUploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Photo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhotoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSendTimeMS(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsUploaded(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Photo entity, long rowId) {
        entity.setPhotoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Photo entity) {
        if(entity != null) {
            return entity.getPhotoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Photo entity) {
        return entity.getPhotoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "photoList" to-many relationship of TimelineTask. */
    public List<Photo> _queryTimelineTask_PhotoList(Long photoId) {
        synchronized (this) {
            if (timelineTask_PhotoListQuery == null) {
                QueryBuilder<Photo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PhotoId.eq(null));
                timelineTask_PhotoListQuery = queryBuilder.build();
            }
        }
        Query<Photo> query = timelineTask_PhotoListQuery.forCurrentThread();
        query.setParameter(0, photoId);
        return query.list();
    }

}
